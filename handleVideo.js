// Import c·∫•u h√¨nh FFmpeg
import "./config/ffmpegConfig.js";

// Import c√°c modules
import fs from "fs";
import path from "path";
import { mergeVideosInBatches } from "./modules/batchProcessor.js";
import { addSubtitleToVideo } from "./modules/subtitleProcessor.js";
import { checkVideoCompatibility } from "./modules/videoCompatibility.js";
import { mergeVideos, mergeVideosWithNormalization, mergeVideosWithReencode } from "./modules/videoMerger.js";
import { handleVideoError, showHelp } from "./utils/errorHandler.js";
import { findSubtitleFiles, findVideoFiles, generateOutputName } from "./utils/fileUtils.js";

console.log("üé¨ === C√îNG C·ª§ GH√âP VIDEO & G·∫ÆN SUBTITLE ===");
console.log("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:");
console.log("   1. ƒê·∫∑t t·∫•t c·∫£ video c·∫ßn gh√©p v√†o th∆∞ m·ª•c 'videos'");
console.log("   2. ƒê·∫∑t file subtitle (.srt) v√†o c√πng th∆∞ m·ª•c (t√πy ch·ªçn)");
console.log("   3. Ch·∫°y script n√†y");
console.log("   4. Video ƒë√£ gh√©p (v√† c√≥ subtitle) s·∫Ω ƒë∆∞·ª£c l∆∞u trong c√πng th∆∞ m·ª•c");
console.log("==========================================\n");

async function main(customFolder = null, subtitleMethod = 'hardburn', forceNormalize = false) {
  const folder = customFolder ? path.resolve(customFolder) : path.join(process.cwd(), "videos");
  console.log(`üîç T√¨m ki·∫øm video trong th∆∞ m·ª•c: ${folder}`);
  
  const videoPaths = findVideoFiles(folder);
  const subtitlePaths = findSubtitleFiles(folder);
  
  if (videoPaths.length === 0) {
    console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video n√†o trong th∆∞ m·ª•c!");
    console.log("üìù H√£y ƒë·∫∑t c√°c file video v√†o th∆∞ m·ª•c 'videos'");
    return;
  }

  if (videoPaths.length < 2) {
    console.log("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 2 video ƒë·ªÉ gh√©p!");
    console.log(`üìä T√¨m th·∫•y: ${videoPaths.length} video`);
    videoPaths.forEach((path, index) => {
      console.log(`   ${index + 1}. ${path.split('\\').pop()}`);
    });
    return;
  }

  // Ki·ªÉm tra subtitle
  let subtitlePath = null;
  if (subtitlePaths.length > 0) {
    subtitlePath = subtitlePaths[0]; // S·ª≠ d·ª•ng subtitle ƒë·∫ßu ti√™n t√¨m th·∫•y
    console.log(`üìù T√¨m th·∫•y subtitle: ${subtitlePath.split('\\').pop()}`);
  } else {
    console.log(`üìù Kh√¥ng t√¨m th·∫•y file subtitle (.srt, .ass, .ssa, .vtt)`);
  }

  const outputPath = generateOutputName(folder, false);
  
  console.log(`üìπ S·∫Ω gh√©p ${videoPaths.length} video:`);
  videoPaths.forEach((path, index) => {
    const fileName = path.split('\\').pop();
    const stats = fs.statSync(path);
    const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
    console.log(`   ${index + 1}. ${fileName} (${sizeMB}MB)`);
  });
  
  console.log(`üíæ Output: ${outputPath.split('\\').pop()}`);

  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu gh√©p video...");
    let finalOutputPath = outputPath;
    
    // B∆∞·ªõc 0: Ki·ªÉm tra t∆∞∆°ng th√≠ch video
    const compatibility = await checkVideoCompatibility(videoPaths);
    
    // B∆∞·ªõc 1: Quy·∫øt ƒë·ªãnh ph∆∞∆°ng ph√°p gh√©p d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† t∆∞∆°ng th√≠ch
    const totalSizeMB = compatibility.infos.reduce((sum, info) => sum + (info.size / (1024 * 1024)), 0);
    const shouldUseBatch = videoPaths.length > 10 || totalSizeMB > 5000; // > 10 video ho·∫∑c > 5GB
    
    if (forceNormalize) {
      console.log("üîß Force normalize mode - s·ª≠ d·ª•ng chu·∫©n h√≥a format ƒë·ªÉ kh·∫Øc ph·ª•c timing issues...");
      await mergeVideosWithNormalization(videoPaths, outputPath);
    } else if (shouldUseBatch) {
      console.log(`üì¶ S·ªë l∆∞·ª£ng video l·ªõn (${videoPaths.length}) ho·∫∑c dung l∆∞·ª£ng l·ªõn (${totalSizeMB.toFixed(2)}MB)`);
      console.log("üì¶ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p batch processing...");
      await mergeVideosInBatches(videoPaths, outputPath, 5);
    } else if (compatibility.needsReencode) {
      console.log("üîÑ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p re-encode ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch...");
      await mergeVideosWithReencode(videoPaths, outputPath);
    } else {
      console.log("‚ö° S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p copy codec (nhanh)...");
      try {
        await mergeVideos(videoPaths, outputPath);
      } catch (copyError) {
        // N·∫øu copy codec th·∫•t b·∫°i, th·ª≠ c√°c ph∆∞∆°ng ph√°p kh√°c
        if (copyError.message.includes('Decoder') || 
            copyError.message.includes('codec') ||
            copyError.message.includes('format') ||
            copyError.message.includes('timestamp') ||
            copyError.message.includes('frame')) {
          
          console.log("üîÑ Copy codec th·∫•t b·∫°i, th·ª≠ re-encode...");
          try {
            await mergeVideosWithReencode(videoPaths, outputPath);
          } catch (reencodeError) {
            console.log("üîß Re-encode th·∫•t b·∫°i, s·ª≠ d·ª•ng normalization (ch·∫≠m nh∆∞ng ·ªïn ƒë·ªãnh)...");
            await mergeVideosWithNormalization(videoPaths, outputPath);
          }
        } else {
          throw copyError;
        }
      }
    }
    
    // Hi·ªÉn th·ªã th√¥ng tin file ƒë√£ gh√©p
    const mergedStats = fs.statSync(outputPath);
    const mergedSizeMB = (mergedStats.size / (1024 * 1024)).toFixed(2);
    console.log(`‚úÖ Gh√©p video ho√†n th√†nh: ${outputPath.split('\\').pop()} (${mergedSizeMB}MB)`);
    
    // B∆∞·ªõc 2: G·∫Øn subtitle n·∫øu c√≥
    if (subtitlePath) {
      const subtitleOutputPath = generateOutputName(folder, true);
      console.log(`\nüìù B·∫Øt ƒë·∫ßu g·∫Øn subtitle (ph∆∞∆°ng ph√°p: ${subtitleMethod})...`);
      
      await addSubtitleToVideo(outputPath, subtitlePath, subtitleOutputPath, subtitleMethod);
      
      // Hi·ªÉn th·ªã th√¥ng tin file c√≥ subtitle
      const subtitleStats = fs.statSync(subtitleOutputPath);
      const subtitleSizeMB = (subtitleStats.size / (1024 * 1024)).toFixed(2);
      console.log(`‚úÖ File v·ªõi subtitle: ${subtitleOutputPath.split('\\').pop()} (${subtitleSizeMB}MB)`);
      
      finalOutputPath = subtitleOutputPath;
      
      // T√πy ch·ªçn: X√≥a file trung gian (ch·ªâ c√≥ video, ch∆∞a c√≥ subtitle)
      console.log(`üóëÔ∏è B·∫°n c√≥ mu·ªën x√≥a file trung gian kh√¥ng c√≥ subtitle kh√¥ng? (${outputPath.split('\\').pop()})`);
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    const finalStats = fs.statSync(finalOutputPath);
    const finalSizeMB = (finalStats.size / (1024 * 1024)).toFixed(2);
    console.log(`\nüéâ HO√ÄN TH√ÄNH! File cu·ªëi c√πng: ${finalOutputPath.split('\\').pop()} (${finalSizeMB}MB)`);
    
  } catch (err) {
    handleVideoError(err);
  }
}

// X·ª≠ l√Ω tham s·ªë command line
const args = process.argv.slice(2);
const customFolder = args.find(arg => arg.startsWith('--folder='))?.split('=')[1];
const subtitleMethod = args.find(arg => arg.startsWith('--subtitle='))?.split('=')[1] || 'hardburn';
const forceNormalize = args.includes('--normalize') || args.includes('--fix-timing');
const helpFlag = args.includes('--help') || args.includes('-h');

if (helpFlag) {
  showHelp();
  process.exit(0);
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
if (customFolder) {
  console.log(`üìÅ S·ª≠ d·ª•ng th∆∞ m·ª•c t√πy ch·ªânh: ${customFolder}`);
}

main(customFolder, subtitleMethod, forceNormalize).catch(err => {
  console.error("üí• L·ªói nghi√™m tr·ªçng:", err.message);
  process.exit(1);
});