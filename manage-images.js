// Script qu·∫£n l√Ω ·∫£nh trong th∆∞ m·ª•c images
import fs from 'fs';
import path from 'path';

const imagesFolder = path.join(process.cwd(), "images");

// H√†m li·ªát k√™ t·∫•t c·∫£ ·∫£nh
function listImages() {
    if (!fs.existsSync(imagesFolder)) {
        console.log("üìÅ Th∆∞ m·ª•c 'images' ch∆∞a t·ªìn t·∫°i");
        return [];
    }

    const imageExtensions = ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp'];
    const files = fs.readdirSync(imagesFolder);
    
    const imageFiles = files.filter(file => 
        imageExtensions.some(ext => file.toLowerCase().endsWith(ext))
    );

    return imageFiles.map(file => {
        const filePath = path.join(imagesFolder, file);
        const stats = fs.statSync(filePath);
        return {
            name: file,
            path: filePath,
            size: stats.size,
            sizeMB: (stats.size / (1024 * 1024)).toFixed(2),
            modified: stats.mtime
        };
    });
}

// H√†m hi·ªÉn th·ªã th√¥ng tin ·∫£nh
function showImagesInfo() {
    console.log("üñºÔ∏è === TH√îNG TIN ·∫¢NH TRONG TH∆Ø M·ª§C ===");
    
    const images = listImages();
    
    if (images.length === 0) {
        console.log("üì≠ Kh√¥ng c√≥ ·∫£nh n√†o trong th∆∞ m·ª•c 'images'");
        console.log("üí° Ch·∫°y 'node findVideo.js' ho·∫∑c 'node test-images.js' ƒë·ªÉ t·∫£i ·∫£nh");
        return;
    }

    console.log(`üìä T·ªïng s·ªë ·∫£nh: ${images.length}`);
    
    const totalSizeMB = images.reduce((sum, img) => sum + parseFloat(img.sizeMB), 0);
    console.log(`üíæ T·ªïng dung l∆∞·ª£ng: ${totalSizeMB.toFixed(2)}MB`);
    
    console.log("\nüìã Danh s√°ch ·∫£nh:");
    images
        .sort((a, b) => b.modified - a.modified) // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        .forEach((img, index) => {
            const modifiedDate = img.modified.toLocaleString();
            console.log(`   ${index + 1}. ${img.name} (${img.sizeMB}MB) - ${modifiedDate}`);
        });
}

// H√†m x√≥a ·∫£nh c≈©
function cleanupOldImages(daysOld = 7) {
    console.log(`üßπ X√≥a ·∫£nh c≈© h∆°n ${daysOld} ng√†y...`);
    
    const images = listImages();
    const cutoffDate = new Date(Date.now() - (daysOld * 24 * 60 * 60 * 1000));
    
    const oldImages = images.filter(img => img.modified < cutoffDate);
    
    if (oldImages.length === 0) {
        console.log("‚úÖ Kh√¥ng c√≥ ·∫£nh c≈© n√†o c·∫ßn x√≥a");
        return;
    }

    console.log(`üóëÔ∏è S·∫Ω x√≥a ${oldImages.length} ·∫£nh c≈©:`);
    oldImages.forEach(img => {
        console.log(`   - ${img.name} (${img.sizeMB}MB)`);
    });

    // X√°c nh·∫≠n tr∆∞·ªõc khi x√≥a
    const args = process.argv.slice(2);
    const confirmed = args.includes('--confirm');
    
    if (!confirmed) {
        console.log("\n‚ö†Ô∏è ƒê·ªÉ x√°c nh·∫≠n x√≥a, th√™m --confirm v√†o cu·ªëi command");
        console.log("üîß V√≠ d·ª•: node manage-images.js cleanup --confirm");
        return;
    }

    // Th·ª±c hi·ªán x√≥a
    let deletedCount = 0;
    oldImages.forEach(img => {
        try {
            fs.unlinkSync(img.path);
            console.log(`‚úÖ ƒê√£ x√≥a: ${img.name}`);
            deletedCount++;
        } catch (error) {
            console.error(`‚ùå L·ªói khi x√≥a ${img.name}:`, error.message);
        }
    });

    console.log(`\nüéâ ƒê√£ x√≥a ${deletedCount}/${oldImages.length} ·∫£nh c≈©`);
}

// H√†m sao ch√©p ·∫£nh sang th∆∞ m·ª•c kh√°c
function copyImagesTo(destinationFolder) {
    console.log(`üìÇ Sao ch√©p ·∫£nh sang: ${destinationFolder}`);
    
    const images = listImages();
    
    if (images.length === 0) {
        console.log("‚ùå Kh√¥ng c√≥ ·∫£nh n√†o ƒë·ªÉ sao ch√©p");
        return;
    }

    // T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(destinationFolder)) {
        fs.mkdirSync(destinationFolder, { recursive: true });
        console.log(`üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: ${destinationFolder}`);
    }

    let copiedCount = 0;
    images.forEach(img => {
        try {
            const destPath = path.join(destinationFolder, img.name);
            fs.copyFileSync(img.path, destPath);
            console.log(`‚úÖ ƒê√£ sao ch√©p: ${img.name}`);
            copiedCount++;
        } catch (error) {
            console.error(`‚ùå L·ªói khi sao ch√©p ${img.name}:`, error.message);
        }
    });

    console.log(`\nüéâ ƒê√£ sao ch√©p ${copiedCount}/${images.length} ·∫£nh`);
}

// X·ª≠ l√Ω command line arguments
const args = process.argv.slice(2);
const command = args[0];

switch (command) {
    case 'list':
    case 'info':
        showImagesInfo();
        break;
        
    case 'cleanup':
        const days = parseInt(args[1]) || 7;
        cleanupOldImages(days);
        break;
        
    case 'copy':
        const destination = args[1];
        if (!destination) {
            console.log("‚ùå C·∫ßn ch·ªâ ƒë·ªãnh th∆∞ m·ª•c ƒë√≠ch");
            console.log("üîß V√≠ d·ª•: node manage-images.js copy /path/to/destination");
        } else {
            copyImagesTo(destination);
        }
        break;
        
    case 'help':
    default:
        console.log("üñºÔ∏è === QU·∫¢N L√ù ·∫¢NH - H∆Ø·ªöNG D·∫™N ===");
        console.log("C√°ch s·ª≠ d·ª•ng:");
        console.log("  node manage-images.js info              # Hi·ªÉn th·ªã th√¥ng tin ·∫£nh");
        console.log("  node manage-images.js list              # Li·ªát k√™ t·∫•t c·∫£ ·∫£nh");
        console.log("  node manage-images.js cleanup [days]    # X√≥a ·∫£nh c≈© (m·∫∑c ƒë·ªãnh 7 ng√†y)");
        console.log("  node manage-images.js copy [path]       # Sao ch√©p ·∫£nh sang th∆∞ m·ª•c kh√°c");
        console.log("  node manage-images.js help              # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y");
        console.log("\nV√≠ d·ª•:");
        console.log("  node manage-images.js cleanup 3 --confirm    # X√≥a ·∫£nh c≈© h∆°n 3 ng√†y");
        console.log("  node manage-images.js copy ../backup         # Sao ch√©p sang th∆∞ m·ª•c backup");
        break;
}

export { cleanupOldImages, copyImagesTo, listImages, showImagesInfo };
