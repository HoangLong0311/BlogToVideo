import { GoogleGenerativeAI } from "@google/generative-ai";
import dotenv from 'dotenv';
import path from 'path';
import { fileURLToPath } from 'url';
import { getAllContentBetweenDollarsExec, getAllContentBetweenSharp, subtitleWrite, writeFile } from "../utils/inputPreprocessor.js";
// import { callViettelTTS } from "./callViettelTTS.js";

// L·∫•y ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c hi·ªán t·∫°i
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Config dotenv v·ªõi path ƒë·∫øn file .env ·ªü th∆∞ m·ª•c g·ªëc
dotenv.config({ path: path.join(__dirname, '..', '.env') });

const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);

const MODELS = {
    GEMINI_2_0_FLASH: 'gemini-2.0-flash',
    GEMINI_1_5: 'gemini-1.5',
    GEMINI_2_5_FLASH: 'gemini-2.5-flash',
    GEMINI_2_5_PRO: 'gemini-2.5-pro'
};

async function exportReadingText(time_min, time_max, inputText) {
    try {
        const model = genAI.getGenerativeModel({ model: MODELS.GEMINI_2_5_FLASH });
        // const prompt = `H√£y t√≥m t·∫Øt ƒëo·∫°n vƒÉn b·∫£n chuy·ªÉn th√†nh k·ªãch b·∫£n ƒë·ªçc v·ªõi t·ªëc ƒë·ªô trung b√¨nh kho·∫£ng 120-140 t·ª´ / ph√∫t, v√† c√≥ th·ªùi l∆∞·ª£ng t∆∞∆°ng ·ª©ng v·ªõi th·ªùi gian ${time} gi√¢y, ch·ªâ c·∫ßn ƒë∆∞a n·ªôi dung ƒë√£ x·ª≠ l√≠ xong
        // kh√¥ng c·∫ßn gi·∫£i th√≠ch, n·ªôi dung: ${inputText}`;

        const prompt = `B·∫†N H√ÉY ƒê√ìNG VAI M·ªòT CHUY√äN GIA BI√äN T·∫¨P K·ªäCH B·∫¢N THUY·∫æT MINH CHUY√äN NGHI·ªÜP.

        **Y√äU C·∫¶U:**
        - T√¥i s·∫Ω cung c·∫•p m·ªôt ƒëo·∫°n vƒÉn b·∫£n d√†i
        - B·∫°n h√£y bi·∫øn n√≥ th√†nh m·ªôt k·ªãch b·∫£n thuy·∫øt minh ho√†n ch·ªânh
        - Th·ªùi l∆∞·ª£ng n√≥i: t·ªëi thi·ªÉu ${time_min} gi√¢y v√† t·ªëi ƒëa ${time_max} gi√¢y (t·ªëc ƒë·ªô ƒë·ªçc 140 t·ª´/ph√∫t)
        - Gi·ªçng vƒÉn: (trang tr·ªçng, th√¢n thi·ªán, truy·ªÅn c·∫£m, etc.)
        - ƒê·ªëi t∆∞·ª£ng: ng∆∞·ªùi xem video
        - Ng√¥n ng·ªØ t·ª± nhi√™n, d·ªÖ hi·ªÉu, h·∫•p d·∫´n, mang ƒë·∫øn th√¥ng tin c·∫ßn thi·∫øt cho ng∆∞·ªùi xem.
        - T·∫≠p trung v√†o √Ω ch√≠nh, lu·∫≠n ƒëi·ªÉm quan tr·ªçng
        - Gi·ªØ c√°c s·ªë li·ªáu, v√≠ d·ª• quan tr·ªçng

        **N·ªòI DUNG G·ªêC:**
        ${inputText}

        CH·ªà C·∫¶N TR·∫¢ V·ªÄ N·ªòI DUNG ƒê√É X·ª¨ L√ç NGHƒ®A L√Ä NH·ªÆNG G√å C·∫¶N ƒê·ªåC L√äN TH√ÄNH TI·∫æNG KH√îNG C·∫¶N CH√ö TH√çCH, LO·∫†I B·ªé C√ÅC K√ç T·ª∞ ƒê·∫∂C BI·ªÜT KH√îNG C·∫¶N THI·∫æT, KH√îNG C·∫¶N XU·ªêNG D√íNG.
        `

        let result = await model.generateContent(prompt);
        await writeFile(String(result.response.text()), './reading.txt');

        return String(result.response.text());
    } catch(error) {
        console.error('L·ªói ghi file:', error);
    }
}

async function callGemini(command, inputText) {
    try {
        // L·∫•y K·ªãch b·∫£n ƒë·ªçc
        const textToRead = await exportReadingText("130", "150", inputText);
        // const audioTime = await callViettelTTS(textToRead, './audio/output.mp3');
        const audioTime = "150";

        // T·∫°o subtitle
        const model = genAI.getGenerativeModel({ model: MODELS.GEMINI_2_5_PRO });
        const prompt =  `T·ª´ n·ªôi dung sau h√£y t·∫°o k·ªãch b·∫£n ph·ª• ƒë·ªÅ chu·∫©n SRT v·ªõi c√°c y√™u c·∫ßu:
                    1. **QUY T·∫ÆC TH·ªúI GIAN:**
                    - T·ªïng th·ªùi gian video kh√¥ng qu√° ${audioTime} gi√¢y. \n ${command} \n ${textToRead}`;

        let result = await model.generateContent(prompt);
        const responseText = String(result.response.text());

        // L·∫•y n·ªôi dung video background -> eng.txt
        const allEngContent = getAllContentBetweenDollarsExec(responseText);
        const engText = allEngContent.join('\n');
        await writeFile(engText, './eng.txt');

        // Ghi subtitle -> subtitle.srt
        const text = getAllContentBetweenSharp(responseText).join('\n');
        const resultText = result.response.text();
        subtitleWrite(text);

        // In ra console ƒë·ªÉ debug
        console.log('üéØ T√¨m th·∫•y', allEngContent.length, 'ƒëo·∫°n m√¥ t·∫£ ti·∫øng Anh:');
        allEngContent.forEach((content, index) => {
            console.log(`${index + 1}. ${content}`);
        });
        console.log(resultText);
        // console.log(responseText);
        return true;

    } catch (error) {
        console.error("‚ùå L·ªói h√†m:", error);
        return false;
    }
}

// const a = await callGemini("Write a detailed summary of the following text:", "This is a sample text to be summarized.");
// const inputText = fs.readFileSync("../input.txt", "utf8"); // ch·ª©a b√†i blog d√†i ~7000 t·ª´;
// exportReadingText("150", inputText);

export default callGemini;