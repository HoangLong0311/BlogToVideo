import fs from "fs";
import path from "path";
import { ffmpeg } from "../config/ffmpegConfig.js";
import { cleanupTempFile } from "../utils/fileUtils.js";

// H√†m gh√©p video v·ªõi chu·∫©n h√≥a format (khuy·∫øn ngh·ªã cho video c√≥ v·∫•n ƒë·ªÅ)
export async function mergeVideosWithNormalization(videoPaths, outputPath) {
  return new Promise((resolve, reject) => {
    const mergedFileList = path.join(process.cwd(), `file_list_normalize_${Date.now()}.txt`);
    let timeoutId;
    
    try {
      console.log("üîß B·∫Øt ƒë·∫ßu gh√©p video v·ªõi chu·∫©n h√≥a format...");
      
      // T·∫°o file list
      const fileContent = videoPaths.map((file) => {
        let processedPath = path.resolve(file).replace(/\\/g, '/').replace(/'/g, "\\'");
        return `file '${processedPath}'`;
      }).join("\n");
      
      fs.writeFileSync(mergedFileList, fileContent, 'utf8');
      
      const command = ffmpeg()
        .input(mergedFileList)
        .inputOptions([
          "-f concat", 
          "-safe 0",
          "-probesize 50M",                  // Gi·∫£m probe size (thay v√¨ 200M)
          "-analyzeduration 50M"             // Gi·∫£m analyze duration (thay v√¨ 200M)
        ])
        .outputOptions([
          "-c:v libx264",                    // H.264 codec
          "-c:a aac",                        // AAC codec
          "-crf 23",                         // Ch·∫•t l∆∞·ª£ng c√¢n b·∫±ng (thay v√¨ 18)
          "-preset fast",                    // T·ªëc ƒë·ªô nhanh h∆°n (thay v√¨ slow)
          "-r 30",                           // 30fps c·ªë ƒë·ªãnh
          "-g 60",                           // GOP size = 2 gi√¢y
          "-keyint_min 30",                  // Min keyframe interval
          "-sc_threshold 0",                 // Disable scene cut detection
          "-avoid_negative_ts make_zero",    // Fix timestamp
          "-fflags +genpts+igndts",          // Generate PTS, ignore DTS
          "-max_muxing_queue_size 1024",     // Gi·∫£m buffer size (thay v√¨ 8192)
          "-vsync cfr",                      // Constant frame rate
          "-async 1",                        // A/V sync
          "-ar 44100",                       // 44.1kHz audio
          "-ac 2",                           // Stereo
          "-b:a 128k",                       // Audio bitrate
          "-movflags +faststart",            // Web optimized
          "-threads 0"                       // S·ª≠ d·ª•ng t·ªëi ƒëa CPU cores
        ])
        .on("start", (cmd) => {
          console.log("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu normalize v√† gh√©p...");
          console.log("üîß Command:", cmd);
        })
        .on("progress", (progress) => {
          if (progress.percent) {
            process.stdout.write(`\rüîß Normalizing: ${Math.round(progress.percent)}%`);
          }
        })
        .on("error", (err) => {
          console.log("\n‚ùå L·ªói normalize:", err.message);
          cleanupTempFile(mergedFileList);
          reject(err);
        })
        .on("end", () => {
          console.log("\n‚úÖ Normalize v√† gh√©p ho√†n th√†nh!");
          cleanupTempFile(mergedFileList);
          resolve(outputPath);
        });

      command.save(outputPath);

    } catch (error) {
      cleanupTempFile(mergedFileList);
      reject(error);
    }
  });
}

// H√†m gh√©p video c∆° b·∫£n v·ªõi copy codec
export async function mergeVideos(videoPaths, outputPath) {
  return new Promise((resolve, reject) => {
    const mergedFileList = path.join(process.cwd(), `file_list_${Date.now()}.txt`);
    let timeoutId;

    try {
      console.log(`üìä Chu·∫©n b·ªã gh√©p ${videoPaths.length} video...`);
      
      // Ki·ªÉm tra t·∫•t c·∫£ file input c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y th√¥ng tin
      const videoInfos = [];
      for (let i = 0; i < videoPaths.length; i++) {
        const videoPath = videoPaths[i];
        if (!fs.existsSync(videoPath)) {
          throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${videoPath}`);
        }
        
        const stats = fs.statSync(videoPath);
        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        videoInfos.push({ path: videoPath, size: sizeMB });
        console.log(`   ${i + 1}/${videoPaths.length}: ${path.basename(videoPath)} (${sizeMB}MB)`);
      }

      // T·∫°o file list v·ªõi ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c x·ª≠ l√Ω c·∫©n th·∫≠n
      const fileContent = videoPaths.map((file) => {
        // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n cho Windows - escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        let processedPath = path.resolve(file);
        
        // Chuy·ªÉn sang forward slash v√† escape
        processedPath = processedPath.replace(/\\/g, '/');
        
        // Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cho FFmpeg
        processedPath = processedPath.replace(/'/g, "\\'");
        
        return `file '${processedPath}'`;
      }).join("\n");
      
      fs.writeFileSync(mergedFileList, fileContent, 'utf8');
      console.log("üìù File danh s√°ch ƒë∆∞·ª£c t·∫°o:", path.basename(mergedFileList));
      
      // Debug: In n·ªôi dung file list
      console.log("üìã N·ªôi dung file list:");
      fileContent.split('\n').forEach((line, idx) => {
        console.log(`   ${idx + 1}. ${line}`);
      });

      // C·∫•u h√¨nh timeout ng·∫Øn h∆°n v√† th√¥ng minh h∆°n
      const totalSizeMB = videoInfos.reduce((sum, info) => sum + parseFloat(info.size), 0);
      const estimatedTimeoutMinutes = Math.max(2, Math.min(10, Math.ceil(totalSizeMB / 200))); // 2-10 ph√∫t
      const timeoutMs = estimatedTimeoutMinutes * 60 * 1000;
      
      console.log(`‚è∞ Timeout: ${estimatedTimeoutMinutes} ph√∫t (${totalSizeMB.toFixed(2)}MB t·ªïng)`);

      let ffmpegCommand; // Declare command ƒë·ªÉ c√≥ th·ªÉ kill
      
      // Thi·∫øt l·∫≠p timeout v·ªõi kh·∫£ nƒÉng kill command
      timeoutId = setTimeout(() => {
        console.log("\n‚è∞ TIMEOUT! D·ª´ng FFmpeg v√† th·ª≠ ph∆∞∆°ng ph√°p kh√°c...");
        if (ffmpegCommand && ffmpegCommand.ffmpegProc && !ffmpegCommand.ffmpegProc.killed) {
          console.log("üî™ Killing FFmpeg process...");
          ffmpegCommand.ffmpegProc.kill('SIGKILL');
        }
        reject(new Error(`Timeout sau ${estimatedTimeoutMinutes} ph√∫t`));
      }, timeoutMs);

      // Th·ª≠ ph∆∞∆°ng ph√°p copy codec (nhanh nh·∫•t)
      ffmpegCommand = ffmpeg()
        .input(mergedFileList)
        .inputOptions(["-f concat", "-safe 0"])
        .outputOptions([
          "-c copy",
          "-avoid_negative_ts make_zero",    // X·ª≠ l√Ω timestamp √¢m
          "-fflags +genpts",                 // T·∫°o l·∫°i PTS/DTS
          "-max_muxing_queue_size 1024",     // Gi·∫£m buffer queue (thay v√¨ 4096)
          "-probesize 50M",                  // Gi·∫£m probe size (thay v√¨ 100M)
          "-analyzeduration 50M",            // Gi·∫£m analyze duration (thay v√¨ 100M)
          "-async 1",                        // ƒê·ªìng b·ªô audio/video
          "-vsync cfr"                       // Constant frame rate
        ])
        .on("start", (cmd) => {
          console.log("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu th·ª±c thi FFmpeg...");
          console.log("üîß Ph∆∞∆°ng ph√°p: copy codec");
          console.log("üîß Command:", cmd);
        })
        .on("progress", (progress) => {
          if (progress.percent) {
            process.stdout.write(`\r‚è≥ ƒêang x·ª≠ l√Ω: ${Math.round(progress.percent)}% (copy)`);
          }
        })
        .on("error", (err) => {
          clearTimeout(timeoutId);
          console.log(`\n‚ùå L·ªói FFmpeg (copy):`, err.message);
          
          // Cleanup
          cleanupTempFile(mergedFileList);
          reject(err);
        })
        .on("end", () => {
          clearTimeout(timeoutId);
          console.log(`\n‚úÖ Gh√©p video ho√†n th√†nh (copy)!`);
          
          // Cleanup
          cleanupTempFile(mergedFileList);
          resolve(outputPath);
        });

      ffmpegCommand.save(outputPath);

    } catch (error) {
      clearTimeout(timeoutId);
      // Cleanup n·∫øu c√≥ l·ªói
      cleanupTempFile(mergedFileList);
      reject(error);
    }
  });
}

// H√†m gh√©p video v·ªõi re-encode (d·ª± ph√≤ng khi copy codec th·∫•t b·∫°i)
export async function mergeVideosWithReencode(videoPaths, outputPath) {
  return new Promise((resolve, reject) => {
    const mergedFileList = path.join(process.cwd(), `file_list_reencode_${Date.now()}.txt`);
    let timeoutId;
    
    try {
      console.log("üîÑ B·∫Øt ƒë·∫ßu gh√©p video v·ªõi re-encode...");
      
      // T·∫°o file list
      const fileContent = videoPaths.map((file) => {
        let processedPath = path.resolve(file).replace(/\\/g, '/').replace(/'/g, "\\'");
        return `file '${processedPath}'`;
      }).join("\n");
      
      fs.writeFileSync(mergedFileList, fileContent, 'utf8');
      
      const command = ffmpeg()
        .input(mergedFileList)
        .inputOptions([
          "-f concat", 
          "-safe 0",
          "-probesize 50M",                  // Gi·∫£m probe size (thay v√¨ 100M)
          "-analyzeduration 50M"             // Gi·∫£m analyze duration (thay v√¨ 100M)
        ])
        .outputOptions([
          "-c:v libx264",                    // Re-encode video v·ªõi H.264
          "-c:a aac",                        // Re-encode audio v·ªõi AAC
          "-crf 23",                         // Ch·∫•t l∆∞·ª£ng t·ªët
          "-preset fast",                    // T·ªëc ƒë·ªô nhanh h∆°n (thay v√¨ medium)
          "-r 30",                           // Frame rate c·ªë ƒë·ªãnh 30fps
          "-g 60",                           // Keyframe interval
          "-avoid_negative_ts make_zero",    // X·ª≠ l√Ω timestamp √¢m
          "-fflags +genpts",                 // T·∫°o l·∫°i PTS/DTS
          "-max_muxing_queue_size 1024",     // Gi·∫£m buffer queue (thay v√¨ 4096)
          "-vsync cfr",                      // Constant frame rate
          "-async 1",                        // ƒê·ªìng b·ªô audio/video
          "-ar 44100",                       // Audio sample rate c·ªë ƒë·ªãnh
          "-ac 2",                           // Stereo audio
          "-threads 0"                       // S·ª≠ d·ª•ng t·ªëi ƒëa CPU cores
        ])
        .on("start", (cmd) => {
          console.log("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu re-encode...");
          console.log("üîß Command:", cmd);
        })
        .on("progress", (progress) => {
          if (progress.percent) {
            process.stdout.write(`\rüîÑ Re-encoding: ${Math.round(progress.percent)}%`);
          }
        })
        .on("error", (err) => {
          console.log("\n‚ùå L·ªói re-encode:", err.message);
          
          // Cleanup
          cleanupTempFile(mergedFileList);
          reject(err);
        })
        .on("end", () => {
          console.log("\n‚úÖ Re-encode ho√†n th√†nh!");
          
          // Cleanup
          cleanupTempFile(mergedFileList);
          resolve(outputPath);
        });

      command.save(outputPath);

    } catch (error) {
      cleanupTempFile(mergedFileList);
      reject(error);
    }
  });
}