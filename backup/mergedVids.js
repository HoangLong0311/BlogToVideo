import ffmpegInstaller from "@ffmpeg-installer/ffmpeg";
import ffmpeg from "fluent-ffmpeg";
import fs from "fs";
import path from "path";

// C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n ffmpeg
ffmpeg.setFfmpegPath(ffmpegInstaller.path);

// Th·ª≠ import ffprobe-installer n·∫øu c√≥
let ffprobeInstaller = null;
try {
  ffprobeInstaller = await import("@ffprobe-installer/ffprobe");
  ffmpeg.setFfprobePath(ffprobeInstaller.default.path);
  console.log("‚úÖ FFprobe from installer:", ffprobeInstaller.default.path);
} catch (error) {
  // N·∫øu kh√¥ng c√≥ ffprobe-installer, t√¨m trong th∆∞ m·ª•c ffmpeg
  const ffmpegDir = path.dirname(ffmpegInstaller.path);
  const ffprobePath = path.join(ffmpegDir, process.platform === 'win32' ? 'ffprobe.exe' : 'ffprobe');
  
  if (fs.existsSync(ffprobePath)) {
    ffmpeg.setFfprobePath(ffprobePath);
    console.log("‚úÖ FFprobe found with ffmpeg:", ffprobePath);
  } else {
    console.log("‚ö†Ô∏è FFprobe not found. Installing @ffprobe-installer/ffprobe recommended");
    console.log("ÔøΩ Run: npm install @ffprobe-installer/ffprobe");
    console.log("üîç Will try to proceed without detailed video analysis...");
  }
}

console.log("üé¨ === C√îNG C·ª§ GH√âP VIDEO & G·∫ÆN SUBTITLE ===");
console.log("üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:");
console.log("   1. ƒê·∫∑t t·∫•t c·∫£ video c·∫ßn gh√©p v√†o th∆∞ m·ª•c 'videos'");
console.log("   2. ƒê·∫∑t file subtitle (.srt) v√†o c√πng th∆∞ m·ª•c (t√πy ch·ªçn)");
console.log("   3. Ch·∫°y script n√†y");
console.log("   4. Video ƒë√£ gh√©p (v√† c√≥ subtitle) s·∫Ω ƒë∆∞·ª£c l∆∞u trong c√πng th∆∞ m·ª•c");
console.log("==========================================\n");

async function mergeVideos(videoPaths, outputPath) {
  return new Promise((resolve, reject) => {
    const mergedFileList = path.join(process.cwd(), `file_list_${Date.now()}.txt`);
    let timeoutId;

    try {
      console.log(`üìä Chu·∫©n b·ªã gh√©p ${videoPaths.length} video...`);
      
      // Ki·ªÉm tra t·∫•t c·∫£ file input c√≥ t·ªìn t·∫°i kh√¥ng v√† l·∫•y th√¥ng tin
      const videoInfos = [];
      for (let i = 0; i < videoPaths.length; i++) {
        const videoPath = videoPaths[i];
        if (!fs.existsSync(videoPath)) {
          throw new Error(`File kh√¥ng t·ªìn t·∫°i: ${videoPath}`);
        }
        
        const stats = fs.statSync(videoPath);
        const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
        videoInfos.push({ path: videoPath, size: sizeMB });
        console.log(`   ${i + 1}/${videoPaths.length}: ${path.basename(videoPath)} (${sizeMB}MB)`);
      }

      // T·∫°o file list v·ªõi ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c x·ª≠ l√Ω c·∫©n th·∫≠n
      const fileContent = videoPaths.map((file) => {
        // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n cho Windows - escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        let processedPath = path.resolve(file);
        
        // Chuy·ªÉn sang forward slash v√† escape
        processedPath = processedPath.replace(/\\/g, '/');
        
        // Escape c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát cho FFmpeg
        processedPath = processedPath.replace(/'/g, "\\'");
        
        return `file '${processedPath}'`;
      }).join("\n");
      
      fs.writeFileSync(mergedFileList, fileContent, 'utf8');
      console.log("üìù File danh s√°ch ƒë∆∞·ª£c t·∫°o:", path.basename(mergedFileList));
      
      // Debug: In n·ªôi dung file list
      console.log("üìã N·ªôi dung file list:");
      fileContent.split('\n').forEach((line, idx) => {
        console.log(`   ${idx + 1}. ${line}`);
      });

      // C·∫•u h√¨nh timeout d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† k√≠ch th∆∞·ªõc video
      const totalSizeMB = videoInfos.reduce((sum, info) => sum + parseFloat(info.size), 0);
      const estimatedTimeoutMinutes = Math.max(5, Math.ceil(totalSizeMB / 100) * videoPaths.length);
      const timeoutMs = estimatedTimeoutMinutes * 60 * 1000;
      
      console.log(`‚è∞ Timeout ∆∞·ªõc t√≠nh: ${estimatedTimeoutMinutes} ph√∫t (${totalSizeMB.toFixed(2)}MB t·ªïng)`);

      // Thi·∫øt l·∫≠p timeout
      timeoutId = setTimeout(() => {
        console.log("\n‚è∞ TIMEOUT! Qu√° tr√¨nh gh√©p video qu√° l√¢u, s·∫Ω th·ª≠ ph∆∞∆°ng ph√°p kh√°c...");
        reject(new Error(`Timeout sau ${estimatedTimeoutMinutes} ph√∫t`));
      }, timeoutMs);

      // Th·ª≠ ph∆∞∆°ng ph√°p 1: Copy codec (nhanh nh·∫•t)
      let command = ffmpeg()
        .input(mergedFileList)
        .inputOptions(["-f concat", "-safe 0"])
        .outputOptions([
          "-c copy",
          "-avoid_negative_ts make_zero",
          "-fflags +genpts",
          "-max_muxing_queue_size 1024" // TƒÉng buffer cho nhi·ªÅu video
        ]);

      const setupHandlers = (method = "copy") => {
        command
          .on("start", (cmd) => {
            console.log("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu th·ª±c thi FFmpeg...");
            console.log(`üîß Ph∆∞∆°ng ph√°p: ${method}`);
            console.log("üîß Command:", cmd);
          })
          .on("progress", (progress) => {
            if (progress.percent) {
              process.stdout.write(`\r‚è≥ ƒêang x·ª≠ l√Ω: ${Math.round(progress.percent)}% (${method})`);
            }
          })
          .on("error", (err) => {
            clearTimeout(timeoutId);
            console.log(`\n‚ùå L·ªói FFmpeg (${method}):`, err.message);
            
            // N·∫øu copy codec th·∫•t b·∫°i, th·ª≠ re-encode
            if (method === "copy" && (
              err.message.includes('Decoder') || 
              err.message.includes('codec') ||
              err.message.includes('format')
            )) {
              console.log("üîÑ Copy codec th·∫•t b·∫°i, chuy·ªÉn sang re-encode...");
              
              // Cleanup tr∆∞·ªõc khi th·ª≠ l·∫°i
              if (fs.existsSync(mergedFileList)) {
                try { fs.unlinkSync(mergedFileList); } catch {}
              }
              
              // Th·ª≠ l·∫°i v·ªõi re-encode
              mergeVideosWithReencode(videoPaths, outputPath)
                .then(resolve)
                .catch(reject);
              return;
            }
            
            // Cleanup
            if (fs.existsSync(mergedFileList)) {
              try { fs.unlinkSync(mergedFileList); } catch {}
            }
            reject(err);
          })
          .on("end", () => {
            clearTimeout(timeoutId);
            console.log(`\n‚úÖ Gh√©p video ho√†n th√†nh (${method})!`);
            
            // Cleanup
            if (fs.existsSync(mergedFileList)) {
              try { fs.unlinkSync(mergedFileList); } catch {}
            }
            resolve(outputPath);
          });
      };

      setupHandlers("copy");
      command.save(outputPath);

    } catch (error) {
      clearTimeout(timeoutId);
      // Cleanup n·∫øu c√≥ l·ªói
      if (fs.existsSync(mergedFileList)) {
        try { fs.unlinkSync(mergedFileList); } catch {}
      }
      reject(error);
    }
  });
}

// H√†m gh√©p video v·ªõi re-encode (d·ª± ph√≤ng khi copy codec th·∫•t b·∫°i)
async function mergeVideosWithReencode(videoPaths, outputPath) {
  return new Promise((resolve, reject) => {
    const mergedFileList = path.join(process.cwd(), `file_list_reencode_${Date.now()}.txt`);
    
    try {
      console.log("üîÑ B·∫Øt ƒë·∫ßu gh√©p video v·ªõi re-encode...");
      
      // T·∫°o file list
      const fileContent = videoPaths.map((file) => {
        let processedPath = path.resolve(file).replace(/\\/g, '/').replace(/'/g, "\\'");
        return `file '${processedPath}'`;
      }).join("\n");
      
      fs.writeFileSync(mergedFileList, fileContent, 'utf8');
      
      const command = ffmpeg()
        .input(mergedFileList)
        .inputOptions(["-f concat", "-safe 0"])
        .outputOptions([
          "-c:v libx264",        // Re-encode video v·ªõi H.264
          "-c:a aac",            // Re-encode audio v·ªõi AAC
          "-crf 23",             // Ch·∫•t l∆∞·ª£ng t·ªët
          "-preset medium",      // T·ªëc ƒë·ªô trung b√¨nh
          "-r 30",               // Frame rate c·ªë ƒë·ªãnh
          "-avoid_negative_ts make_zero",
          "-fflags +genpts",
          "-max_muxing_queue_size 2048"
        ])
        .on("start", (cmd) => {
          console.log("‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu re-encode...");
          console.log("üîß Command:", cmd);
        })
        .on("progress", (progress) => {
          if (progress.percent) {
            process.stdout.write(`\rüîÑ Re-encoding: ${Math.round(progress.percent)}%`);
          }
        })
        .on("error", (err) => {
          console.log("\n‚ùå L·ªói re-encode:", err.message);
          
          // Cleanup
          if (fs.existsSync(mergedFileList)) {
            try { fs.unlinkSync(mergedFileList); } catch {}
          }
          reject(err);
        })
        .on("end", () => {
          console.log("\n‚úÖ Re-encode ho√†n th√†nh!");
          
          // Cleanup
          if (fs.existsSync(mergedFileList)) {
            try { fs.unlinkSync(mergedFileList); } catch {}
          }
          resolve(outputPath);
        });

      command.save(outputPath);

    } catch (error) {
      if (fs.existsSync(mergedFileList)) {
        try { fs.unlinkSync(mergedFileList); } catch {}
      }
      reject(error);
    }
  });
}

// H√†m ki·ªÉm tra th√¥ng tin video ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch
async function checkVideoCompatibility(videoPaths) {
  console.log("üîç Ki·ªÉm tra t∆∞∆°ng th√≠ch video...");
  
  // Ki·ªÉm tra ffprobe tr∆∞·ªõc khi s·ª≠ d·ª•ng
  try {
    await new Promise((resolve, reject) => {
      ffmpeg.ffprobe(__filename, (err) => {
        // Ch·ªâ ki·ªÉm tra l·ªói ffprobe kh√¥ng t√¨m th·∫•y, kh√¥ng c·∫ßn check file
        if (err && (err.message.includes('ffprobe') || err.message.includes('ENOENT'))) {
          reject(new Error('FFprobe kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng th·ªÉ ch·∫°y'));
        }
        resolve();
      });
    });
  } catch (error) {
    console.log("‚ö†Ô∏è FFprobe kh√¥ng kh·∫£ d·ª•ng, b·ªè qua ki·ªÉm tra t∆∞∆°ng th√≠ch");
    console.log("üìù S·∫Ω s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p copy codec (m·∫∑c ƒë·ªãnh)");
    
    // Tr·∫£ v·ªÅ th√¥ng tin c∆° b·∫£n kh√¥ng c·∫ßn ffprobe
    const basicInfos = videoPaths.map(videoPath => {
      const stats = fs.statSync(videoPath);
      return {
        path: videoPath,
        name: path.basename(videoPath),
        duration: 'unknown',
        size: stats.size,
        videoCodec: 'unknown',
        audioCodec: 'unknown',
        width: 'unknown',
        height: 'unknown',
        fps: 'unknown'
      };
    });
    
    return {
      infos: basicInfos,
      needsReencode: false, // Assume compatible ƒë·ªÉ d√πng copy codec
      codecs: { video: ['unknown'], audio: ['unknown'] },
      resolutions: ['unknown']
    };
  }
  
  const videoInfos = [];
  
  for (let i = 0; i < videoPaths.length; i++) {
    const videoPath = videoPaths[i];
    
    try {
      const info = await new Promise((resolve, reject) => {
        // Th√™m timeout cho ffprobe
        const timeoutId = setTimeout(() => {
          reject(new Error('FFprobe timeout'));
        }, 10000); // 10 gi√¢y timeout
        
        ffmpeg.ffprobe(videoPath, (err, metadata) => {
          clearTimeout(timeoutId);
          
          if (err) {
            reject(err);
            return;
          }
          
          const videoStream = metadata.streams.find(s => s.codec_type === 'video');
          const audioStream = metadata.streams.find(s => s.codec_type === 'audio');
          
          resolve({
            path: videoPath,
            name: path.basename(videoPath),
            duration: metadata.format.duration,
            size: metadata.format.size,
            videoCodec: videoStream ? videoStream.codec_name : 'unknown',
            audioCodec: audioStream ? audioStream.codec_name : 'unknown',
            width: videoStream ? videoStream.width : 0,
            height: videoStream ? videoStream.height : 0,
            fps: videoStream ? (videoStream.r_frame_rate ? eval(videoStream.r_frame_rate) : 0) : 0
          });
        });
      });
      
      videoInfos.push(info);
      console.log(`   ‚úÖ ${info.name}: ${info.videoCodec}/${info.audioCodec} ${info.width}x${info.height} @${info.fps.toFixed(1)}fps`);
      
    } catch (error) {
      console.log(`   ‚ùå ${path.basename(videoPath)}: Kh√¥ng th·ªÉ ƒë·ªçc th√¥ng tin - ${error.message}`);
      
      // N·∫øu l·ªói ffprobe, t·∫°o th√¥ng tin c∆° b·∫£n
      const stats = fs.statSync(videoPath);
      const basicInfo = {
        path: videoPath,
        name: path.basename(videoPath),
        duration: 'unknown',
        size: stats.size,
        videoCodec: 'unknown',
        audioCodec: 'unknown',
        width: 'unknown',
        height: 'unknown',
        fps: 'unknown'
      };
      
      videoInfos.push(basicInfo);
      console.log(`   ‚ö†Ô∏è ${basicInfo.name}: S·ª≠ d·ª•ng th√¥ng tin c∆° b·∫£n (${(stats.size / (1024 * 1024)).toFixed(2)}MB)`);
    }
  }
  
  // Ki·ªÉm tra t∆∞∆°ng th√≠ch codec
  const videoCodecs = [...new Set(videoInfos.map(v => v.videoCodec))];
  const audioCodecs = [...new Set(videoInfos.map(v => v.audioCodec))];
  const resolutions = [...new Set(videoInfos.map(v => `${v.width}x${v.height}`))];
  
  console.log(`üìä Th·ªëng k√™:`);
  console.log(`   Video codecs: ${videoCodecs.join(', ')}`);
  console.log(`   Audio codecs: ${audioCodecs.join(', ')}`);
  console.log(`   Resolutions: ${resolutions.join(', ')}`);
  
  // ƒê·ªÅ xu·∫•t ph∆∞∆°ng ph√°p gh√©p
  const needsReencode = videoCodecs.length > 1 || audioCodecs.length > 1 || resolutions.length > 1;
  
  if (needsReencode) {
    console.log("‚ö†Ô∏è Video c√≥ codec/resolution kh√°c nhau, c√≥ th·ªÉ c·∫ßn re-encode");
  } else {
    console.log("‚úÖ T·∫•t c·∫£ video t∆∞∆°ng th√≠ch, c√≥ th·ªÉ d√πng copy codec");
  }
  
  return {
    infos: videoInfos,
    needsReencode,
    codecs: { video: videoCodecs, audio: audioCodecs },
    resolutions
  };
}

// H√†m ƒë·ªÉ t√¨m file subtitle trong th∆∞ m·ª•c
function findSubtitleFiles(folder) {
  const subtitleExtensions = ['.srt', '.ass', '.ssa', '.vtt'];
  
  if (!fs.existsSync(folder)) {
    return [];
  }

  const files = fs.readdirSync(folder);
  const subtitleFiles = files
    .filter(file => subtitleExtensions.some(ext => file.toLowerCase().endsWith(ext)))
    .map(file => path.join(folder, file))
    .sort();

  return subtitleFiles;
}

// H√†m ƒë·ªÉ t√¨m t·∫•t c·∫£ video trong th∆∞ m·ª•c
function findVideoFiles(folder) {
  const videoExtensions = ['.mp4', '.avi', '.mov', '.mkv', '.flv', '.wmv', '.webm'];
  
  if (!fs.existsSync(folder)) {
    console.log(`üìÅ T·∫°o th∆∞ m·ª•c: ${folder}`);
    fs.mkdirSync(folder, { recursive: true });
    return [];
  }

  const files = fs.readdirSync(folder);
  const videoFiles = files
    .filter(file => videoExtensions.some(ext => file.toLowerCase().endsWith(ext)))
    .map(file => path.join(folder, file))
    .sort(); // S·∫Øp x·∫øp theo t√™n file

  return videoFiles;
}

// H√†m t·∫°o t√™n output d·ª±a tr√™n timestamp
function generateOutputName(folder, withSubtitle = false) {
  const timestamp = new Date().toISOString()
    .replace(/[:.]/g, '-')
    .replace('T', '_')
    .split('.')[0];
  const suffix = withSubtitle ? '_with_subtitle' : '';
  return path.join(folder, `merged_video${suffix}_${timestamp}.mp4`);
}

// H√†m gh√©p video theo batch n·∫øu c√≥ qu√° nhi·ªÅu video
async function mergeVideosInBatches(videoPaths, outputPath, batchSize = 5) {
  if (videoPaths.length <= batchSize) {
    // N·∫øu kh√¥ng qu√° nhi·ªÅu video, gh√©p tr·ª±c ti·∫øp
    return await mergeVideos(videoPaths, outputPath);
  }
  
  console.log(`üì¶ Gh√©p theo batch: ${videoPaths.length} video, ${batchSize} video/batch`);
  
  const tempFolder = path.join(path.dirname(outputPath), 'temp_merge');
  if (!fs.existsSync(tempFolder)) {
    fs.mkdirSync(tempFolder, { recursive: true });
  }
  
  const batchPaths = [];
  
  try {
    // Chia video th√†nh c√°c batch v√† gh√©p t·ª´ng batch
    for (let i = 0; i < videoPaths.length; i += batchSize) {
      const batch = videoPaths.slice(i, i + batchSize);
      const batchOutputPath = path.join(tempFolder, `batch_${Math.floor(i/batchSize) + 1}.mp4`);
      
      console.log(`üì¶ X·ª≠ l√Ω batch ${Math.floor(i/batchSize) + 1}/${Math.ceil(videoPaths.length/batchSize)}: ${batch.length} video`);
      
      if (batch.length === 1) {
        // N·∫øu ch·ªâ c√≥ 1 video trong batch, copy tr·ª±c ti·∫øp
        fs.copyFileSync(batch[0], batchOutputPath);
      } else {
        await mergeVideos(batch, batchOutputPath);
      }
      
      batchPaths.push(batchOutputPath);
    }
    
    // Gh√©p t·∫•t c·∫£ c√°c batch l·∫°i v·ªõi nhau
    console.log(`üîó Gh√©p ${batchPaths.length} batch th√†nh file cu·ªëi c√πng...`);
    await mergeVideos(batchPaths, outputPath);
    
    // Cleanup temp files
    console.log("üóëÔ∏è D·ªçn d·∫πp file t·∫°m...");
    for (const batchPath of batchPaths) {
      if (fs.existsSync(batchPath)) {
        fs.unlinkSync(batchPath);
      }
    }
    fs.rmdirSync(tempFolder);
    
    return outputPath;
    
  } catch (error) {
    // Cleanup n·∫øu c√≥ l·ªói
    console.log("üóëÔ∏è D·ªçn d·∫πp file t·∫°m do l·ªói...");
    for (const batchPath of batchPaths) {
      if (fs.existsSync(batchPath)) {
        try { fs.unlinkSync(batchPath); } catch {}
      }
    }
    if (fs.existsSync(tempFolder)) {
      try { fs.rmdirSync(tempFolder); } catch {}
    }
    throw error;
  }
}

// H√†m ƒë·ªÉ g·∫Øn subtitle v√†o video v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
async function addSubtitleToVideo(videoPath, subtitlePath, outputPath, method = 'hardburn') {
  return new Promise((resolve, reject) => {
    console.log(`üìù B·∫Øt ƒë·∫ßu g·∫Øn subtitle (ph∆∞∆°ng ph√°p: ${method})...`);
    
    let command = ffmpeg()
      .input(videoPath);

    if (method === 'hardburn') {
      // Ph∆∞∆°ng ph√°p 1: Burn subtitle v√†o video (lu√¥n hi·ªÉn th·ªã, kh√¥ng th·ªÉ t·∫Øt)
      console.log('üî• S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p HARDBURN - subtitle s·∫Ω ƒë∆∞·ª£c burn v√†o video');
      
      // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n cho Windows v√† FFmpeg
      let processedPath = subtitlePath;
      
      // Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n Windows sang format ph√π h·ª£p v·ªõi FFmpeg
      if (process.platform === 'win32') {
        // Thay th·∫ø backslash b·∫±ng forward slash v√† escape colon
        processedPath = subtitlePath.replace(/\\/g, '/').replace(/:/g, '\\:');
      }
      
      // S·ª≠ d·ª•ng nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ x·ª≠ l√Ω subtitle filter
      const subtitleFilters = [
        `subtitles='${processedPath}'`,
        `subtitles=${processedPath}`,
        `subtitles="${processedPath}"`,
        // Backup: s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n g·ªëc
        `subtitles='${subtitlePath}'`
      ];
      
      // Th·ª≠ t·ª´ng filter cho ƒë·∫øn khi th√†nh c√¥ng
      let filterIndex = 0;
      const tryFilter = () => {
        if (filterIndex >= subtitleFilters.length) {
          reject(new Error('T·∫•t c·∫£ c√°c c√°ch g·∫Øn hardburn subtitle ƒë·ªÅu th·∫•t b·∫°i'));
          return;
        }
        
        const currentFilter = subtitleFilters[filterIndex];
        console.log(`üîß Th·ª≠ filter ${filterIndex + 1}/${subtitleFilters.length}: ${currentFilter}`);
        
        command = ffmpeg()
          .input(videoPath)
          .videoFilters([currentFilter])
          .outputOptions([
            '-c:a copy',  // Copy audio codec, re-encode video
            '-crf 23',    // Ch·∫•t l∆∞·ª£ng video t·ªët
            '-preset medium' // C√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† ch·∫•t l∆∞·ª£ng
          ]);
          
        setupCommand();
        filterIndex++;
      };
      
      const setupCommand = () => {
        command
          .on('start', (cmd) => {
            console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu burn subtitle v√†o video...');
            console.log('üîß Command:', cmd);
          })
          .on('progress', (progress) => {
            if (progress.percent) {
              process.stdout.write(`\rüî• ƒêang burn subtitle: ${Math.round(progress.percent)}%`);
            }
          })
          .on('error', (err) => {
            console.log(`\n‚ùå Filter ${filterIndex} th·∫•t b·∫°i: ${err.message}`);
            tryFilter(); // Th·ª≠ filter ti·∫øp theo
          })
          .on('end', () => {
            console.log(`\n‚úÖ Burn subtitle ho√†n th√†nh v·ªõi filter ${filterIndex}!`);
            resolve(outputPath);
          })
          .save(outputPath);
      };
      
      tryFilter(); // B·∫Øt ƒë·∫ßu th·ª≠
      return; // Kh√¥ng th·ª±c hi·ªán code b√™n d∆∞·ªõi
      
    } else if (method === 'embed') {
      // Ph∆∞∆°ng ph√°p 2: Nh√∫ng subtitle v√†o video (c√≥ th·ªÉ b·∫≠t/t·∫Øt trong player)
      command = command
        .input(subtitlePath)
        .outputOptions([
          '-c:v copy',           // Copy video codec
          '-c:a copy',           // Copy audio codec
          '-c:s mov_text',       // Subtitle codec for MP4
          '-disposition:s:0 default', // Set subtitle as default
          '-metadata:s:s:0 language=vie', // Set subtitle language
          '-metadata:s:s:0 title=Vietnamese' // Set subtitle title
        ]);
    } else if (method === 'sidecar') {
      // Ph∆∞∆°ng ph√°p 3: T·∫°o file subtitle ri√™ng c√πng t√™n
      const sidecarPath = outputPath.replace('.mp4', '.srt');
      fs.copyFileSync(subtitlePath, sidecarPath);
      console.log(`üìã ƒê√£ t·∫°o file subtitle ri√™ng: ${sidecarPath.split('\\').pop()}`);
      
      // Ch·ªâ copy video, kh√¥ng g·∫Øn subtitle
      command = command
        .outputOptions([
          '-c:v copy',
          '-c:a copy'
        ]);
    }
    
    // X·ª≠ l√Ω cho embed v√† sidecar (hardburn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n)
    command
      .on('start', (cmd) => {
        console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω subtitle...');
        console.log('üîß Command:', cmd);
      })
      .on('progress', (progress) => {
        if (progress.percent) {
          process.stdout.write(`\rüìù ƒêang g·∫Øn subtitle: ${Math.round(progress.percent)}%`);
        }
      })
      .on('error', (err) => {
        console.log('\n‚ùå L·ªói khi g·∫Øn subtitle:', err.message);
        
        // N·∫øu embed kh√¥ng th√†nh c√¥ng, t·∫°o file sidecar
        if (method === 'embed') {
          console.log('üîÑ Th·ª≠ t·∫°o file subtitle ri√™ng...');
          addSubtitleToVideo(videoPath, subtitlePath, outputPath, 'sidecar')
            .then(resolve)
            .catch(reject);
          return;
        }
        
        reject(err);
      })
      .on('end', () => {
        console.log(`\n‚úÖ G·∫Øn subtitle ho√†n th√†nh (${method})!`);
        resolve(outputPath);
      });

    command.save(outputPath);
  });
}

async function main(customFolder = null, subtitleMethod = 'hardburn') {
  const folder = customFolder ? path.resolve(customFolder) : path.join(process.cwd(), "videos");
  console.log(`üîç T√¨m ki·∫øm video trong th∆∞ m·ª•c: ${folder}`);
  
  const videoPaths = findVideoFiles(folder);
  const subtitlePaths = findSubtitleFiles(folder);
  
  if (videoPaths.length === 0) {
    console.log("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y video n√†o trong th∆∞ m·ª•c!");
    console.log("üìù H√£y ƒë·∫∑t c√°c file video v√†o th∆∞ m·ª•c 'videos'");
    return;
  }

  if (videoPaths.length < 2) {
    console.log("‚ö†Ô∏è C·∫ßn √≠t nh·∫•t 2 video ƒë·ªÉ gh√©p!");
    console.log(`üìä T√¨m th·∫•y: ${videoPaths.length} video`);
    videoPaths.forEach((path, index) => {
      console.log(`   ${index + 1}. ${path.split('\\').pop()}`);
    });
    return;
  }

  // Ki·ªÉm tra subtitle
  let subtitlePath = null;
  if (subtitlePaths.length > 0) {
    subtitlePath = subtitlePaths[0]; // S·ª≠ d·ª•ng subtitle ƒë·∫ßu ti√™n t√¨m th·∫•y
    console.log(`üìù T√¨m th·∫•y subtitle: ${subtitlePath.split('\\').pop()}`);
  } else {
    console.log(`üìù Kh√¥ng t√¨m th·∫•y file subtitle (.srt, .ass, .ssa, .vtt)`);
  }

  const outputPath = generateOutputName(folder, false);
  
  console.log(`üìπ S·∫Ω gh√©p ${videoPaths.length} video:`);
  videoPaths.forEach((path, index) => {
    const fileName = path.split('\\').pop();
    const stats = fs.statSync(path);
    const sizeMB = (stats.size / (1024 * 1024)).toFixed(2);
    console.log(`   ${index + 1}. ${fileName} (${sizeMB}MB)`);
  });
  
  console.log(`üíæ Output: ${outputPath.split('\\').pop()}`);

  try {
    console.log("üöÄ B·∫Øt ƒë·∫ßu gh√©p video...");
    let finalOutputPath = outputPath;
    
    // B∆∞·ªõc 0: Ki·ªÉm tra t∆∞∆°ng th√≠ch video
    const compatibility = await checkVideoCompatibility(videoPaths);
    
    // B∆∞·ªõc 1: Quy·∫øt ƒë·ªãnh ph∆∞∆°ng ph√°p gh√©p d·ª±a tr√™n s·ªë l∆∞·ª£ng v√† t∆∞∆°ng th√≠ch
    const totalSizeMB = compatibility.infos.reduce((sum, info) => sum + (info.size / (1024 * 1024)), 0);
    const shouldUseBatch = videoPaths.length > 10 || totalSizeMB > 5000; // > 10 video ho·∫∑c > 5GB
    
    if (shouldUseBatch) {
      console.log(`üì¶ S·ªë l∆∞·ª£ng video l·ªõn (${videoPaths.length}) ho·∫∑c dung l∆∞·ª£ng l·ªõn (${totalSizeMB.toFixed(2)}MB)`);
      console.log("üì¶ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p batch processing...");
      await mergeVideosInBatches(videoPaths, outputPath, 5);
    } else if (compatibility.needsReencode) {
      console.log("üîÑ S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p re-encode ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch...");
      await mergeVideosWithReencode(videoPaths, outputPath);
    } else {
      console.log("‚ö° S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p copy codec (nhanh)...");
      await mergeVideos(videoPaths, outputPath);
    }
    
    // Hi·ªÉn th·ªã th√¥ng tin file ƒë√£ gh√©p
    const mergedStats = fs.statSync(outputPath);
    const mergedSizeMB = (mergedStats.size / (1024 * 1024)).toFixed(2);
    console.log(`‚úÖ Gh√©p video ho√†n th√†nh: ${outputPath.split('\\').pop()} (${mergedSizeMB}MB)`);
    
    // B∆∞·ªõc 2: G·∫Øn subtitle n·∫øu c√≥
    if (subtitlePath) {
      const subtitleOutputPath = generateOutputName(folder, true);
      console.log(`\nüìù B·∫Øt ƒë·∫ßu g·∫Øn subtitle (ph∆∞∆°ng ph√°p: ${subtitleMethod})...`);
      
      await addSubtitleToVideo(outputPath, subtitlePath, subtitleOutputPath, subtitleMethod);
      
      // Hi·ªÉn th·ªã th√¥ng tin file c√≥ subtitle
      const subtitleStats = fs.statSync(subtitleOutputPath);
      const subtitleSizeMB = (subtitleStats.size / (1024 * 1024)).toFixed(2);
      console.log(`‚úÖ File v·ªõi subtitle: ${subtitleOutputPath.split('\\').pop()} (${subtitleSizeMB}MB)`);
      
      finalOutputPath = subtitleOutputPath;
      
      // T√πy ch·ªçn: X√≥a file trung gian (ch·ªâ c√≥ video, ch∆∞a c√≥ subtitle)
      console.log(`üóëÔ∏è B·∫°n c√≥ mu·ªën x√≥a file trung gian kh√¥ng c√≥ subtitle kh√¥ng? (${outputPath.split('\\').pop()})`);
    }
    
    // Hi·ªÉn th·ªã k·∫øt qu·∫£ cu·ªëi c√πng
    const finalStats = fs.statSync(finalOutputPath);
    const finalSizeMB = (finalStats.size / (1024 * 1024)).toFixed(2);
    console.log(`\nüéâ HO√ÄN TH√ÄNH! File cu·ªëi c√πng: ${finalOutputPath.split('\\').pop()} (${finalSizeMB}MB)`);
    
  } catch (err) {
    console.error("‚ùå L·ªói khi gh√©p video:", err.message);
    
    // G·ª£i √Ω m·ªôt s·ªë l·ªói th∆∞·ªùng g·∫∑p
    if (err.message.includes('No such file')) {
      console.log("üí° G·ª£i √Ω: Ki·ªÉm tra l·∫°i ƒë∆∞·ªùng d·∫´n file video");
    } else if (err.message.includes('codec') || err.message.includes('Decoder')) {
      console.log("üí° G·ª£i √Ω: Video c√≥ codec kh√¥ng t∆∞∆°ng th√≠ch");
      console.log("   - Th·ª≠ convert video v·ªÅ MP4/H.264 tr∆∞·ªõc khi gh√©p");
      console.log("   - Ho·∫∑c d√πng tham s·ªë --subtitle=embed thay v√¨ hardburn");
    } else if (err.message.includes('Permission denied')) {
      console.log("üí° G·ª£i √Ω: Ki·ªÉm tra quy·ªÅn truy c·∫≠p th∆∞ m·ª•c");
    } else if (err.message.includes('ffprobe') || err.message.includes('FFprobe')) {
      console.log("üí° G·ª£i √Ω: FFprobe kh√¥ng t√¨m th·∫•y ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông");
      console.log("   - C√†i ƒë·∫∑t: npm install @ffprobe-installer/ffprobe");
      console.log("   - Ho·∫∑c t·∫£i FFmpeg full t·ª´: https://ffmpeg.org/download.html");
      console.log("   - Script v·∫´n c√≥ th·ªÉ ch·∫°y nh∆∞ng kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c t∆∞∆°ng th√≠ch video");
      console.log("   - Th·ª≠ ch·∫°y: node check-ffmpeg-setup.js ƒë·ªÉ ki·ªÉm tra setup");
    } else if (err.message.includes('timeout') || err.message.includes('Timeout')) {
      console.log("üí° G·ª£i √Ω: Qu√° tr√¨nh gh√©p video qu√° l√¢u");
      console.log("   - Video c√≥ th·ªÉ qu√° l·ªõn ho·∫∑c c√≥ v·∫•n ƒë·ªÅ");
      console.log("   - Th·ª≠ chia nh·ªè th√†nh c√°c batch nh·ªè h∆°n");
      console.log("   - Ki·ªÉm tra dung l∆∞·ª£ng ·ªï c·ª©ng c√≤n tr·ªëng");
    } else if (err.message.includes('format') || err.message.includes('Invalid')) {
      console.log("üí° G·ª£i √Ω: ƒê·ªãnh d·∫°ng video kh√¥ng h·ª£p l·ªá");
      console.log("   - Ki·ªÉm tra t·∫•t c·∫£ file c√≥ ph·∫£i video h·ª£p l·ªá kh√¥ng");
      console.log("   - Th·ª≠ v·ªõi video ƒë·ªãnh d·∫°ng kh√°c (.mp4, .avi, .mov)");
    } else if (err.message.includes('memory') || err.message.includes('Memory')) {
      console.log("üí° G·ª£i √Ω: H·∫øt b·ªô nh·ªõ");
      console.log("   - ƒê√≥ng c√°c ·ª©ng d·ª•ng kh√°c ƒë·ªÉ gi·∫£i ph√≥ng RAM");
      console.log("   - Th·ª≠ gh√©p √≠t video h∆°n trong m·ªôt l·∫ßn");
    } else {
      console.log("üí° G·ª£i √Ω chung:");
      console.log("   - Ki·ªÉm tra t·∫•t c·∫£ video c√≥ m·ªü ƒë∆∞·ª£c kh√¥ng");
      console.log("   - Th·ª≠ gh√©p t·ª´ng c·∫∑p video ƒë·ªÉ t√¨m video l·ªói");
      console.log("   - ƒê·∫£m b·∫£o ƒë·ªß dung l∆∞·ª£ng ·ªï c·ª©ng tr·ªëng");
      console.log("   - Kh·ªüi ƒë·ªông l·∫°i m√°y n·∫øu c·∫ßn thi·∫øt");
    }
  }
}

// X·ª≠ l√Ω tham s·ªë command line
const args = process.argv.slice(2);
const customFolder = args.find(arg => arg.startsWith('--folder='))?.split('=')[1];
const subtitleMethod = args.find(arg => arg.startsWith('--subtitle='))?.split('=')[1] || 'hardburn';
const helpFlag = args.includes('--help') || args.includes('-h');

if (helpFlag) {
  console.log("üé¨ === C√îNG C·ª§ GH√âP VIDEO & G·∫ÆN SUBTITLE - H∆Ø·ªöNG D·∫™N ===");
  console.log("C√°ch s·ª≠ d·ª•ng:");
  console.log("  node mergedVids.js                          # Gh√©p video v√† burn subtitle (m·∫∑c ƒë·ªãnh)");
  console.log("  node mergedVids.js --folder=path            # Ch·ªâ ƒë·ªãnh th∆∞ m·ª•c kh√°c");
  console.log("  node mergedVids.js --subtitle=hardburn      # Burn subtitle v√†o video (m·∫∑c ƒë·ªãnh)");
  console.log("  node mergedVids.js --subtitle=embed         # Nh√∫ng subtitle v√†o video (c√≥ th·ªÉ b·∫≠t/t·∫Øt)");
  console.log("  node mergedVids.js --subtitle=sidecar       # T·∫°o file subtitle ri√™ng");
  console.log("  node mergedVids.js --help                   # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n n√†y");
  console.log("\nƒê·ªãnh d·∫°ng video h·ªó tr·ª£:");
  console.log("  .mp4, .avi, .mov, .mkv, .flv, .wmv, .webm");
  console.log("\nƒê·ªãnh d·∫°ng subtitle h·ªó tr·ª£:");
  console.log("  .srt, .ass, .ssa, .vtt");
  console.log("\nPh∆∞∆°ng ph√°p g·∫Øn subtitle:");
  console.log("  üìå embed     - Nh√∫ng v√†o video (c√≥ th·ªÉ b·∫≠t/t·∫Øt trong player)");
  console.log("  üî• hardburn  - Burn v√†o video (lu√¥n hi·ªÉn th·ªã, kh√¥ng th·ªÉ t·∫Øt)");
  console.log("  üìÑ sidecar   - File subtitle ri√™ng (c√πng t√™n v·ªõi video)");
  console.log("\nCh·ª©c nƒÉng:");
  console.log("  ‚úÖ Gh√©p nhi·ªÅu video th√†nh 1 file");
  console.log("  ‚úÖ 3 ph∆∞∆°ng ph√°p g·∫Øn subtitle kh√°c nhau");
  console.log("  ‚úÖ T·ª± ƒë·ªông fallback n·∫øu m·ªôt ph∆∞∆°ng ph√°p th·∫•t b·∫°i");
  console.log("  ‚úÖ Hi·ªÉn th·ªã progress bar trong qu√° tr√¨nh x·ª≠ l√Ω");
  console.log("  ‚úÖ T·∫°o t√™n file output t·ª± ƒë·ªông theo timestamp");
  console.log("=============================================================");
  process.exit(0);
}

// Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
if (customFolder) {
  console.log(`üìÅ S·ª≠ d·ª•ng th∆∞ m·ª•c t√πy ch·ªânh: ${customFolder}`);
}

main(customFolder, subtitleMethod).catch(err => {
  console.error("üí• L·ªói nghi√™m tr·ªçng:", err.message);
  process.exit(1);
});
