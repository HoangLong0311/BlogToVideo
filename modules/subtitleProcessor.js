import fs from "fs";
import { ffmpeg } from "../config/ffmpegConfig.js";

// H√†m ƒë·ªÉ g·∫Øn subtitle v√†o video v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
export async function addSubtitleToVideo(videoPath, subtitlePath, outputPath, method = 'hardburn') {
  return new Promise((resolve, reject) => {
    console.log(`üìù B·∫Øt ƒë·∫ßu g·∫Øn subtitle (ph∆∞∆°ng ph√°p: ${method})...`);
    
    let command = ffmpeg()
      .input(videoPath);

    if (method === 'hardburn') {
      // Ph∆∞∆°ng ph√°p 1: Burn subtitle v√†o video (lu√¥n hi·ªÉn th·ªã, kh√¥ng th·ªÉ t·∫Øt)
      console.log('üî• S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p HARDBURN - subtitle s·∫Ω ƒë∆∞·ª£c burn v√†o video');
      
      // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n cho Windows v√† FFmpeg
      let processedPath = subtitlePath;
      
      // Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n Windows sang format ph√π h·ª£p v·ªõi FFmpeg
      if (process.platform === 'win32') {
        // Thay th·∫ø backslash b·∫±ng forward slash v√† escape colon
        processedPath = subtitlePath.replace(/\\/g, '/').replace(/:/g, '\\:');
      }
      
      // S·ª≠ d·ª•ng nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ x·ª≠ l√Ω subtitle filter
      const subtitleFilters = [
        `subtitles='${processedPath}'`,
        `subtitles=${processedPath}`,
        `subtitles="${processedPath}"`,
        // Backup: s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n g·ªëc
        `subtitles='${subtitlePath}'`
      ];
      
      // Th·ª≠ t·ª´ng filter cho ƒë·∫øn khi th√†nh c√¥ng
      let filterIndex = 0;
      const tryFilter = () => {
        if (filterIndex >= subtitleFilters.length) {
          reject(new Error('T·∫•t c·∫£ c√°c c√°ch g·∫Øn hardburn subtitle ƒë·ªÅu th·∫•t b·∫°i'));
          return;
        }
        
        const currentFilter = subtitleFilters[filterIndex];
        console.log(`üîß Th·ª≠ filter ${filterIndex + 1}/${subtitleFilters.length}: ${currentFilter}`);
        
        command = ffmpeg()
          .input(videoPath)
          .videoFilters([currentFilter])
          .outputOptions([
            '-c:a copy',  // Copy audio codec, re-encode video
            '-crf 23',    // Ch·∫•t l∆∞·ª£ng video t·ªët
            '-preset medium' // C√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† ch·∫•t l∆∞·ª£ng
          ]);
          
        setupCommand();
        filterIndex++;
      };
      
      const setupCommand = () => {
        command
          .on('start', (cmd) => {
            console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu burn subtitle v√†o video...');
            console.log('üîß Command:', cmd);
          })
          .on('progress', (progress) => {
            if (progress.percent) {
              process.stdout.write(`\rüî• ƒêang burn subtitle: ${Math.round(progress.percent)}%`);
            }
          })
          .on('error', (err) => {
            console.log(`\n‚ùå Filter ${filterIndex} th·∫•t b·∫°i: ${err.message}`);
            tryFilter(); // Th·ª≠ filter ti·∫øp theo
          })
          .on('end', () => {
            console.log(`\n‚úÖ Burn subtitle ho√†n th√†nh v·ªõi filter ${filterIndex}!`);
            resolve(outputPath);
          })
          .save(outputPath);
      };
      
      tryFilter(); // B·∫Øt ƒë·∫ßu th·ª≠
      return; // Kh√¥ng th·ª±c hi·ªán code b√™n d∆∞·ªõi
      
    } else if (method === 'embed') {
      // Ph∆∞∆°ng ph√°p 2: Nh√∫ng subtitle v√†o video (c√≥ th·ªÉ b·∫≠t/t·∫Øt trong player)
      command = command
        .input(subtitlePath)
        .outputOptions([
          '-c:v copy',           // Copy video codec
          '-c:a copy',           // Copy audio codec
          '-c:s mov_text',       // Subtitle codec for MP4
          '-disposition:s:0 default', // Set subtitle as default
          '-metadata:s:s:0 language=vie', // Set subtitle language
          '-metadata:s:s:0 title=Vietnamese' // Set subtitle title
        ]);
    } else if (method === 'sidecar') {
      // Ph∆∞∆°ng ph√°p 3: T·∫°o file subtitle ri√™ng c√πng t√™n
      const sidecarPath = outputPath.replace('.mp4', '.srt');
      fs.copyFileSync(subtitlePath, sidecarPath);
      console.log(`üìã ƒê√£ t·∫°o file subtitle ri√™ng: ${sidecarPath.split('\\').pop()}`);
      
      // Ch·ªâ copy video, kh√¥ng g·∫Øn subtitle
      command = command
        .outputOptions([
          '-c:v copy',
          '-c:a copy'
        ]);
    }
    
    // X·ª≠ l√Ω cho embed v√† sidecar (hardburn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n)
    command
      .on('start', (cmd) => {
        console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω subtitle...');
        console.log('üîß Command:', cmd);
      })
      .on('progress', (progress) => {
        if (progress.percent) {
          process.stdout.write(`\rüìù ƒêang g·∫Øn subtitle: ${Math.round(progress.percent)}%`);
        }
      })
      .on('error', (err) => {
        console.log('\n‚ùå L·ªói khi g·∫Øn subtitle:', err.message);
        
        // N·∫øu embed kh√¥ng th√†nh c√¥ng, t·∫°o file sidecar
        if (method === 'embed') {
          console.log('üîÑ Th·ª≠ t·∫°o file subtitle ri√™ng...');
          addSubtitleToVideo(videoPath, subtitlePath, outputPath, 'sidecar')
            .then(resolve)
            .catch(reject);
          return;
        }
        
        reject(err);
      })
      .on('end', () => {
        console.log(`\n‚úÖ G·∫Øn subtitle ho√†n th√†nh (${method})!`);
        resolve(outputPath);
      });

    command.save(outputPath);
  });
}