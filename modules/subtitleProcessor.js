import fs from "fs";
import path from "path";
import { ffmpeg } from "../config/ffmpegConfig.js";

// H√†m validate subtitle file
function validateSubtitleFile(subtitlePath) {
  if (!fs.existsSync(subtitlePath)) {
    throw new Error(`File subtitle kh√¥ng t·ªìn t·∫°i: ${subtitlePath}`);
  }
  
  const stats = fs.statSync(subtitlePath);
  if (stats.size === 0) {
    throw new Error(`File subtitle r·ªóng: ${subtitlePath}`);
  }
  
  const ext = path.extname(subtitlePath).toLowerCase();
  const supportedExts = ['.srt', '.ass', '.ssa', '.vtt'];
  if (!supportedExts.includes(ext)) {
    throw new Error(`ƒê·ªãnh d·∫°ng subtitle kh√¥ng h·ªó tr·ª£: ${ext}. H·ªó tr·ª£: ${supportedExts.join(', ')}`);
  }
  
  console.log(`‚úÖ Subtitle h·ª£p l·ªá: ${path.basename(subtitlePath)} (${(stats.size / 1024).toFixed(2)}KB)`);
}

// H√†m ƒë·ªÉ g·∫Øn subtitle v√†o video v·ªõi nhi·ªÅu ph∆∞∆°ng ph√°p
export async function addSubtitleToVideo(videoPath, subtitlePath, outputPath, method = 'hardburn') {
  return new Promise((resolve, reject) => {
    console.log(`üìù B·∫Øt ƒë·∫ßu g·∫Øn subtitle (ph∆∞∆°ng ph√°p: ${method})...`);
    
    // Validate inputs
    try {
      if (!fs.existsSync(videoPath)) {
        throw new Error(`File video kh√¥ng t·ªìn t·∫°i: ${videoPath}`);
      }
      validateSubtitleFile(subtitlePath);
    } catch (error) {
      reject(error);
      return;
    }
    
    let command = ffmpeg()
      .input(videoPath);

    if (method === 'hardburn') {
      // Ph∆∞∆°ng ph√°p 1: Burn subtitle v√†o video (lu√¥n hi·ªÉn th·ªã, kh√¥ng th·ªÉ t·∫Øt)
      console.log('üî• S·ª≠ d·ª•ng ph∆∞∆°ng ph√°p HARDBURN - subtitle s·∫Ω ƒë∆∞·ª£c burn v√†o video');
      
      // X·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n cho Windows v√† FFmpeg
      let processedPath = subtitlePath;
      
      // Chuy·ªÉn ƒë·ªïi ƒë∆∞·ªùng d·∫´n Windows sang format ph√π h·ª£p v·ªõi FFmpeg
      if (process.platform === 'win32') {
        // Thay th·∫ø backslash b·∫±ng forward slash v√† escape colon
        processedPath = subtitlePath.replace(/\\/g, '/').replace(/:/g, '\\:');
      }
      
      // S·ª≠ d·ª•ng nhi·ªÅu c√°ch kh√°c nhau ƒë·ªÉ x·ª≠ l√Ω subtitle filter
      const subtitleFilters = [
        `subtitles='${processedPath}'`,
        `subtitles=${processedPath}`,
        `subtitles="${processedPath}"`,
        // Backup: s·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n g·ªëc
        `subtitles='${subtitlePath}'`
      ];
      
      // Th·ª≠ t·ª´ng filter cho ƒë·∫øn khi th√†nh c√¥ng
      let filterIndex = 0;
      let currentCommand = null;
      let timeoutId = null;
      
      const cleanupCommand = () => {
        if (timeoutId) {
          clearTimeout(timeoutId);
          timeoutId = null;
        }
        if (currentCommand) {
          try {
            currentCommand.kill('SIGKILL');
          } catch (e) {
            // Command ƒë√£ k·∫øt th√∫c ho·∫∑c kh√¥ng th·ªÉ kill
          }
          currentCommand = null;
        }
      };
      
      const tryFilter = () => {
        if (filterIndex >= subtitleFilters.length) {
          cleanupCommand();
          reject(new Error('T·∫•t c·∫£ c√°c c√°ch g·∫Øn hardburn subtitle ƒë·ªÅu th·∫•t b·∫°i'));
          return;
        }
        
        // Cleanup command c≈© tr∆∞·ªõc khi t·∫°o m·ªõi
        cleanupCommand();
        
        const currentFilter = subtitleFilters[filterIndex];
        console.log(`üîß Th·ª≠ filter ${filterIndex + 1}/${subtitleFilters.length}: ${currentFilter}`);
        
        currentCommand = ffmpeg()
          .input(videoPath)
          .videoFilters([currentFilter])
          .outputOptions([
            '-c:a copy',           // Copy audio codec, re-encode video
            '-crf 23',             // Ch·∫•t l∆∞·ª£ng video t·ªët
            '-preset medium',      // C√¢n b·∫±ng gi·ªØa t·ªëc ƒë·ªô v√† ch·∫•t l∆∞·ª£ng
            '-max_muxing_queue_size 1024', // Buffer queue
            '-avoid_negative_ts make_zero'  // Fix timestamp issues
          ]);
        
        // Timeout cho m·ªói attempt (5 ph√∫t)
        timeoutId = setTimeout(() => {
          console.log(`\n‚è∞ Filter ${filterIndex + 1} timeout, th·ª≠ filter ti·∫øp theo...`);
          filterIndex++;
          tryFilter();
        }, 5 * 60 * 1000);
        
        currentCommand
          .on('start', (cmd) => {
            console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu burn subtitle v√†o video...');
            console.log('üîß Command:', cmd);
          })
          .on('progress', (progress) => {
            if (progress.percent) {
              process.stdout.write(`\rüî• ƒêang burn subtitle: ${Math.round(progress.percent)}%`);
            }
          })
          .on('error', (err) => {
            console.log(`\n‚ùå Filter ${filterIndex + 1} th·∫•t b·∫°i: ${err.message}`);
            filterIndex++;
            
            // Delay nh·ªè tr∆∞·ªõc khi th·ª≠ filter ti·∫øp theo
            setTimeout(() => {
              tryFilter();
            }, 1000);
          })
          .on('end', () => {
            console.log(`\n‚úÖ Burn subtitle ho√†n th√†nh v·ªõi filter ${filterIndex + 1}!`);
            cleanupCommand();
            resolve(outputPath);
          })
          .save(outputPath);
      };
      
      tryFilter(); // B·∫Øt ƒë·∫ßu th·ª≠
      return; // Kh√¥ng th·ª±c hi·ªán code b√™n d∆∞·ªõi
      
    } else if (method === 'embed') {
      // Ph∆∞∆°ng ph√°p 2: Nh√∫ng subtitle v√†o video (c√≥ th·ªÉ b·∫≠t/t·∫Øt trong player)
      command = command
        .input(subtitlePath)
        .outputOptions([
          '-c:v copy',           // Copy video codec
          '-c:a copy',           // Copy audio codec
          '-c:s mov_text',       // Subtitle codec for MP4
          '-disposition:s:0 default', // Set subtitle as default
          '-metadata:s:s:0 language=vie', // Set subtitle language
          '-metadata:s:s:0 title=Vietnamese' // Set subtitle title
        ]);
    } else if (method === 'sidecar') {
      // Ph∆∞∆°ng ph√°p 3: T·∫°o file subtitle ri√™ng c√πng t√™n
      const sidecarPath = outputPath.replace('.mp4', '.srt');
      fs.copyFileSync(subtitlePath, sidecarPath);
      console.log(`üìã ƒê√£ t·∫°o file subtitle ri√™ng: ${sidecarPath.split('\\').pop()}`);
      
      // Ch·ªâ copy video, kh√¥ng g·∫Øn subtitle
      command = command
        .outputOptions([
          '-c:v copy',
          '-c:a copy'
        ]);
    }
    
    // X·ª≠ l√Ω cho embed v√† sidecar (hardburn ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω ·ªü tr√™n)
    // Th√™m timeout cho embed/sidecar (3 ph√∫t)
    const timeoutId = setTimeout(() => {
      console.log('\n‚è∞ Timeout khi g·∫Øn subtitle!');
      try {
        command.kill('SIGKILL');
      } catch (e) {
        // Command ƒë√£ k·∫øt th√∫c
      }
      
      if (method === 'embed') {
        console.log('üîÑ Timeout embed, th·ª≠ t·∫°o file sidecar...');
        addSubtitleToVideo(videoPath, subtitlePath, outputPath, 'sidecar')
          .then(resolve)
          .catch(reject);
      } else {
        reject(new Error(`Timeout khi g·∫Øn subtitle v·ªõi ph∆∞∆°ng ph√°p ${method}`));
      }
    }, 3 * 60 * 1000);
    
    command
      .on('start', (cmd) => {
        console.log('‚ñ∂Ô∏è B·∫Øt ƒë·∫ßu x·ª≠ l√Ω subtitle...');
        console.log('üîß Command:', cmd);
      })
      .on('progress', (progress) => {
        if (progress.percent) {
          process.stdout.write(`\rüìù ƒêang g·∫Øn subtitle: ${Math.round(progress.percent)}%`);
        }
      })
      .on('error', (err) => {
        clearTimeout(timeoutId);
        console.log('\n‚ùå L·ªói khi g·∫Øn subtitle:', err.message);
        
        // N·∫øu embed kh√¥ng th√†nh c√¥ng, t·∫°o file sidecar
        if (method === 'embed') {
          console.log('üîÑ Embed th·∫•t b·∫°i, th·ª≠ t·∫°o file subtitle ri√™ng...');
          addSubtitleToVideo(videoPath, subtitlePath, outputPath, 'sidecar')
            .then(resolve)
            .catch(reject);
          return;
        }
        
        reject(err);
      })
      .on('end', () => {
        clearTimeout(timeoutId);
        console.log(`\n‚úÖ G·∫Øn subtitle ho√†n th√†nh (${method})!`);
        resolve(outputPath);
      });

    command.save(outputPath);
  });
}